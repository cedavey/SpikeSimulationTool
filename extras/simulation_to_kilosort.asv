% SIMULATION_TO_KILOSORT Formats the SST simulation into KiloSort format
%
% 	Syntax:
%     success = simulation_to_kilosort();
%     success = simulation_to_kilosort(vsim);
%     success = simulation_to_kilosort(vsim, vout);
%     %(Run as a script to chose from a browse window)
%
%  Input:
%     vsim  -  Optional (struct), this is the output of a SST simulation.
%              If not provided, then the function prompts a file selection
%              for the user to chose the .mat variable to load from the
%              hard drive.
%     vout  -  Optional (string), Path and Filename of the converted
%              simulation.
%
%  Output:
%     ops   - Config
% 
% Artemio Soto-Breceda | 20/August/2019
function varargout = simulation_to_kilosort(varargin)
   if nargin >= 1
      vsim = varargin{1};
      if nargin >= 2
         save_file = vout;
      else
         % Chose a name and location for the new file
         [file,path] = uiputfile(['simulations' filesep 'sim_voltage.mat'],'Save file name');
         if file
            save_file = [path filesep file];
         else
            fprintf('\tUser didn''t chose a file location. The simulation wasn''t saved.\n');
            return;
         end
      end
   else
      
      [file,path] = uigetfile(['..' filesep 'simulations'],'Load simulation');      
      if file         
         file_name = [path filesep file];
         d = load(file_name);
         fn = fieldnames(d);
         vsim = d.(fn{1});
         % Set an aribtrary name for the new file
         file_name = file_name(1 : strfind(file_name, '.mat') - 1);
         save_file = [file_name, '_ks'];
      else
         fprintf('\tUser didn''t chose a file location. The simulation wasn''t loaded.\n');
         return;
      end      
      
   end
   
   data = vsim.data;%(1:1000); % data vector
   t_all    = 0;
   
   ops = getKilosortConfiguration(vsim, save_file);
   
   fs = ops.fs;
   t_record = size(data,1)
   buff = 128;
   NT   = 1 * fs + buff; % batch size + buffer
   dat = zeros(1,NT);
   while t_all < t_record
      dat_old    =  dat;    
      dat = int16(data(max(ceil(t_all * fs), 1) : min(ceil(t_all * fs) + NT - buff, numel(data))) * 200);
      if numel(dat) < (NT-buff)
         dat(end + 1 : (NT-buff)) = 0;
      end
      fwrite(fidW, dat(1:(NT-buff),invChanMap)', 'int16');
      t_all = t_all + (NT-buff)/fs;
   end
   
   % Save file
   save([save_file '.dat'], 'data');
   save([save_file '_ops.mat'], 'ops');
   
   varargout = {};
end

function ops = getKilosortConfiguration(vsim, filename)
   ops.GPU                 = 0; % whether to run this code on an Nvidia GPU (much faster, mexGPUall first)		
   ops.parfor              = 0; % whether to use parfor to accelerate some parts of the algorithm		
   ops.verbose             = 1; % whether to print command line progress		
   ops.showfigures         = 1; % whether to plot figures during optimization		

   pathToData = 'C:\Users\artemios\OneDrive - The University of Melbourne\PostDoc\Code\SpikeSimulationTool\simulations';

   ops.datatype            = 'dat';  % binary ('dat', 'bin') or 'openEphys'		
   ops.fbinary             = [filename '.dat']; % will be created for 'openEphys'		
   ops.fproc               = [pathToData '\temp_wh.dat']; % residual from RAM of preprocessed data		
   ops.root                = [pathToData]; % 'openEphys' only: where raw files are		

   ops.fs                  = round(1/vsim.dt); % sampling rate		(omit if already in chanMap file)
   ops.NchanTOT            = 1;           % total number of channels (omit if already in chanMap file)
   ops.Nchan               = 1;           % number of active channels (omit if already in chanMap file)
   ops.Nfilt               = size(vsim.axons,2);           % number of clusters to use (2-4 times more than Nchan, should be a multiple of 32)     		
   ops.nNeighPC            = 1; % visualization only (Phy): number of channnels to mask the PCs, leave empty to skip (12)		
   ops.nNeigh              = 4; % visualization only (Phy): number of neighboring templates to retain projections of (16)		

   % options for channel whitening		
   ops.whitening           = 'full'; % type of whitening (default 'full', for 'noSpikes' set options for spike detection below)		
   ops.nSkipCov            = 1; % compute whitening matrix from every N-th batch (1)		
   ops.whiteningRange      = Inf; % how many channels to whiten together (Inf for whole probe whitening, should be fine if Nchan<=32)		

   % define the channel map as a filename (string) or simply an array		
   ops.chanMap             = 'C:\Users\artemios\OneDrive - The University of Melbourne\PostDoc\Code\SpikeSimulationTool\simulations\kilosort\chanMap.mat'; % make this file using createChannelMapFile.m		
   ops.criterionNoiseChannels = 0.2; % fraction of "noise" templates allowed to span all channel groups (see createChannelMapFile for more info). 		
   % ops.chanMap = 1:ops.Nchan; % treated as linear probe if a chanMap file		

   % other options for controlling the model and optimization		
   ops.Nrank               = 1;    % matrix rank of spike template model (3)		
   ops.nfullpasses         = 6;    % number of complete passes through data during optimization (6)		
   ops.maxFR               = 20000;  % maximum number of spikes to extract per batch (20000)		
   ops.fshigh              = 300;   % frequency for high pass filtering		
   % ops.fslow             = 2000;   % frequency for low pass filtering (optional)
   ops.ntbuff              = 64;    % samples of symmetrical buffer for whitening and spike detection		
   ops.scaleproc           = 200;   % int16 scaling of whitened data		
   ops.NT                  = 1000;%32*1024+ ops.ntbuff;% this is the batch size (try decreasing if out of memory) 		
   % for GPU should be multiple of 32 + ntbuff		

   % the following options can improve/deteriorate results. 		
   % when multiple values are provided for an option, the first two are beginning and ending anneal values, 		
   % the third is the value used in the final pass. 		
   ops.Th               = [4 10 10];    % threshold for detecting spikes on template-filtered data ([6 12 12])		
   ops.lam              = [5 20 20];   % large means amplitudes are forced around the mean ([10 30 30])		
   ops.nannealpasses    = 4;            % should be less than nfullpasses (4)		
   ops.momentum         = 1./[20 400];  % start with high momentum and anneal (1./[20 1000])		
   ops.shuffle_clusters = 1;            % allow merges and splits during optimization (1)		
   ops.mergeT           = .1;           % upper threshold for merging (.1)		
   ops.splitT           = .1;           % lower threshold for splitting (.1)		

   % options for initializing spikes from data		
   ops.initialize      = 'no'; %'fromData' or 'no'		
   ops.spkTh           = -6;      % spike threshold in standard deviations (4)		
   ops.loc_range       = [3  1];  % ranges to detect peaks; plus/minus in time and channel ([3 1])		
   ops.long_range      = [30  6]; % ranges to detect isolated peaks ([30 6])		
   ops.maskMaxChannels = 1;       % how many channels to mask up/down ([5])		
   ops.crit            = .65;     % upper criterion for discarding spike repeates (0.65)		
   ops.nFiltMax        = 10000;   % maximum "unique" spikes to consider (10000)		

   % load predefined principal components (visualization only (Phy): used for features)		
   dd                  = load('PCspikes2.mat'); % you might want to recompute this from your own data		
   ops.wPCA            = dd.Wi(:,1:7);   % PCs 		

   % options for posthoc merges (under construction)		
   ops.fracse  = 0.1; % binning step along discriminant axis for posthoc merges (in units of sd)		
   ops.epu     = Inf;		

   ops.ForceMaxRAMforDat   = 20e9; % maximum RAM the algorithm will try to use; on Windows it will autodetect.
end